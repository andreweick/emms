package photo

import (
	"bytes"
	"encoding/json"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"path/filepath"
	"time"
)

type CfiResponse struct {
	Result struct {
		ID                string    `json:"id"`
		Filename          string    `json:"filename"`
		Uploaded          time.Time `json:"uploaded"`
		RequireSignedURLs bool      `json:"requireSignedURLs"`
		Variants          []string  `json:"variants"`
	} `json:"result"`
	ResultInfo interface{}   `json:"result_info"`
	Success    bool          `json:"success"`
	Errors     []interface{} `json:"errors"`
	Messages   []interface{} `json:"messages"`
}

type CfiList struct {
	Result struct {
		Images []struct {
			ID                string    `json:"id"`
			Filename          string    `json:"filename"`
			Uploaded          time.Time `json:"uploaded"`
			RequireSignedURLs bool      `json:"requireSignedURLs"`
			Variants          []string  `json:"variants"`
		} `json:"images"`
	} `json:"result"`
	ResultInfo interface{}   `json:"result_info"`
	Success    bool          `json:"success"`
	Errors     []interface{} `json:"errors"`
	Messages   []interface{} `json:"messages"`
}

func create(path string) {
	var cloudflareResponse CfiResponse

	file, err := os.Open(path)
	if err != nil {
		log.Fatalf("1. err: %x", err)
	}
	defer file.Close()

	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)
	part, err := writer.CreateFormFile("file", filepath.Base(path))

	if err != nil {
		log.Fatalf("2. err: %x", err.Error())
	}

	_, err = io.Copy(part, file)
	if err != nil {
		log.Fatalf("3. err: %x", err.Error())
	}

	writer.Close()

	if err != nil {
		log.Fatalf("4. err: %x", err.Error())
	}

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl -X POST -F file=@/Volumes/Mini\ Pudge/edc/photographs/20161029-game-7-2020.jpg -H "Authorization: Bearer <token>" https://api.cloudflare.com/client/v4/accounts/5930846a5870031c415bb26e42e38833/images/v1

	req, err := http.NewRequest("POST", "https://api.cloudflare.com/client/v4/accounts/5930846a5870031c415bb26e42e38833/images/v1", body)
	if err != nil {
		log.Fatalf("5. err: %x", err.Error())
	}

	bearer := "Bearer " + cloudflareSecret

	req.Header.Set("Authorization", bearer)
	req.Header.Set("Content-Type", writer.FormDataContentType())

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatalf("6. err: %x", err.Error())
	} else {
		defer resp.Body.Close()
		bodyJson := &bytes.Buffer{}
		_, err := bodyJson.ReadFrom(resp.Body)
		if err != nil {
			log.Fatalf("7. err: %x", err.Error())
		}

		decoder := json.NewDecoder(bodyJson)
		err = decoder.Decode(&cloudflareResponse)
		if err != nil {
			log.Printf("8. err: %x", err.Error())
			cloudflareResponse.Success = false
		}
	}

	return
}

// func sendCloudflareList() {
// 	// Cloudflare List (GET https://api.cloudflare.com/client/v4/accounts/5930846a5870031c415bb26e42e38833/images/v1?page=777&per_page=10)

// 	// Create client
// 	client := &http.Client{}

// 	// Create request
// 	req, err := http.NewRequest("GET", "https://api.cloudflare.com/client/v4/accounts/"+cfconfig.CloudflareAccountID+"/images/v1?page=777&per_page=10", nil)

// 	if err != nil {
// 		fmt.Printf("Error on call %s\n", err.Error())
// 		panic(err)
// 	}

// 	// Headers
// 	req.Header.Add("Authorization", "Bearer "+cfconfig.CloudflareBearerToken)

// 	parseFormErr := req.ParseForm()
// 	if parseFormErr != nil {
// 		fmt.Println(parseFormErr)
// 	}

// 	// Fetch Request
// 	resp, err := client.Do(req)

// 	if err != nil {
// 		fmt.Println("Failure : ", err)
// 	}

// 	// Read Response Body
// 	respBody, err := ioutil.ReadAll(resp.Body)

// 	if err != nil {
// 		fmt.Printf("Error on call %s\n", err.Error())
// 		panic(err)
// 	}

// 	var imageList CFImages
// 	err = json.Unmarshal(respBody, &imageList)

// 	if err != nil {
// 		log.Printf("Cannot unmarshal json: %s\n", err.Error())
// 	}

// 	// Display Results
// 	fmt.Println("response Body : ", string(respBody))
// }
